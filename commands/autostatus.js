const fs = require('fs');
const path = require('path');

const channelInfo = {
    contextInfo: {
        forwardingScore: 1,
        isForwarded: false,
        forwardedNewsletterMessageInfo: {
            newsletterJid: '@neletter',
            newsletterName: 'NIMA-V5',
            serverMessageId: -1
        }
    }
};

// Path to store auto status configuration
const configPath = path.join(__dirname, '../data/autoStatus.json');

// Initialize config file if it doesn't exist
if (!fs.existsSync(configPath)) {
    fs.writeFileSync(configPath, JSON.stringify({ enabled: false }));
}

async function autoStatusCommand(sock, chatId, msg, args) {
    try {
        // Check if sender is owner
        if (!msg.key.fromMe) {
            await sock.sendMessage(chatId, { 
                text: '‚ùå ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ã‡∂±‡∑î ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í!',
                ...channelInfo
            });
            return;
        }

        // Read current config
        let config = JSON.parse(fs.readFileSync(configPath));

        // If no arguments, show current status
        if (!args || args.length === 0) {
            const status = config.enabled ? '‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í' : '‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í';
            await sock.sendMessage(chatId, { 
                text: `üîÑ *‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑É‡∑î‡∂±*\n\n‡∑Ä‡∂≠‡∑ä‡∂∏‡∂±‡∑ä ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫: ${status}\n\n‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n.autostatus ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ - ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑É‡∑î‡∂± ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±\n.autostatus ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± - ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑É‡∑î‡∂± ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±`,
                ...channelInfo
            });
            return;
        }

        // Handle on/off commands
        const command = args[0].toLowerCase();
        if (command === 'on') {
            config.enabled = true;
            fs.writeFileSync(configPath, JSON.stringify(config));
            await sock.sendMessage(chatId, { 
                text: '‚úÖ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ ‡∑É‡∑Ñ ‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠ ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠!\n‡∂∂‡∑ú‡∂ß‡∑ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂±‡∂ª‡∂π‡∑è ‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠ ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂±‡∑î ‡∂á‡∂≠.',
                ...channelInfo
            });
        } else if (command === 'off') {
            config.enabled = false;
            fs.writeFileSync(configPath, JSON.stringify(config));
            await sock.sendMessage(chatId, { 
                text: '‚ùå ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑É‡∑î‡∂± ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠!\n‡∂∂‡∑ú‡∂ß‡∑ä ‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂±‡∑ú‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.',
                ...channelInfo
            });
        } else {
            await sock.sendMessage(chatId, { 
                text: '‚ùå ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑ä! ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:\n.autostatus ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í - ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í\n.autostatus ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂∫‡∑í - ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∂ª‡∑ä‡∑Å‡∂±‡∂∫ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í',
                ...channelInfo
            });
        }

    } catch (error) {
        console.error('autostatus ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:', error);
        await sock.sendMessage(chatId, { 
            text: '‚ùå ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.!\n' + error.message,
            ...channelInfo
        });
    }
}

// Function to check if auto status is enabled
function isAutoStatusEnabled() {
    try {
        const config = JSON.parse(fs.readFileSync(configPath));
        return config.enabled;
    } catch (error) {
        console.error('‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∑Ä‡∑í‡∂±‡∑ä‚Äç‡∂∫‡∑è‡∑É‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í:', error);
        return false;
    }
}

// Function to handle status updates
async function handleStatusUpdate(sock, status) {
    try {
        if (!isAutoStatusEnabled()) {
            return;
        }

        // Add delay to prevent rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Handle status from messages.upsert
        if (status.messages && status.messages.length > 0) {
            const msg = status.messages[0];
            if (msg.key && msg.key.remoteJid === 'status@broadcast') {
                try {
                    await sock.readMessages([msg.key]);
                    const sender = msg.key.participant || msg.key.remoteJid;
                   // console.log(`‚úÖ Status Viewed `);
                } catch (err) {
                    if (err.message?.includes('rate-overlimit')) {
                        console.log('‚ö†Ô∏è ‡∂Ö‡∂±‡∑î‡∂¥‡∑è‡∂≠ ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä‡∂ß ‡∑Ö‡∂ü‡∑è ‡∑Ä‡∑í‡∂∫, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂∏‡∑í‡∂±‡∑ä...');
                        await new Promise(resolve => setTimeout(resolve, 2000));
                        await sock.readMessages([msg.key]);
                    } else {
                        throw err;
                    }
                }
                return;
            }
        }

        // Handle direct status updates
        if (status.key && status.key.remoteJid === 'status@broadcast') {
            try {
                await sock.readMessages([status.key]);
                const sender = status.key.participant || status.key.remoteJid;
                console.log(`‚úÖ ‡∑É‡∑í‡∂ß ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂∂‡∑ê‡∂Ω‡∑î‡∑Ä‡∑è: ${sender.split('@')[0]}`);
            } catch (err) {
                if (err.message?.includes('rate-overlimit')) {
                    console.log('‚ö†Ô∏è ‡∂Ö‡∂±‡∑î‡∂¥‡∑è‡∂≠ ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä‡∂ß ‡∑Ö‡∂ü‡∑è ‡∑Ä‡∑í‡∂∫, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂∏‡∑í‡∂±‡∑ä...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    await sock.readMessages([status.key]);
                } else {
                    throw err;
                }
            }
            return;
        }

        // Handle status in reactions
        if (status.reaction && status.reaction.key.remoteJid === 'status@broadcast') {
            try {
                await sock.readMessages([status.reaction.key]);
                const sender = status.reaction.key.participant || status.reaction.key.remoteJid;
                console.log(`‚úÖ ‡∑É‡∑í‡∂ß ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂∂‡∑ê‡∂Ω‡∑î‡∑Ä‡∑è: ${sender.split('@')[0]}`);
            } catch (err) {
                if (err.message?.includes('rate-overlimit')) {
                    console.log('‚ö†Ô∏è ‡∂Ö‡∂±‡∑î‡∂¥‡∑è‡∂≠ ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä‡∂ß ‡∑Ö‡∂ü‡∑è ‡∑Ä‡∑í‡∂∫, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂∏‡∑í‡∂±‡∑ä...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    await sock.readMessages([status.reaction.key]);
                } else {
                    throw err;
                }
            }
            return;
        }

    } catch (error) {
        console.error('‚ùå ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∂ª‡∑ä‡∑Å‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í:', error.message);
    }
}

module.exports = {
    autoStatusCommand,
    handleStatusUpdate
}; 
